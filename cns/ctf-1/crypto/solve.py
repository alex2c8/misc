# https://en.wikipedia.org/wiki/RC4#Key-scheduling_algorithm_(KSA)

def encode(key, length):
    out = [i for i in range(256)]

    acc = 0

    for j in range(256):
        acc = (acc + key[j % length] + out[j]) % 256
        out[j], out[acc] = out[acc], out[j]

    return out

def gimme(enc, flag, flag_len):
    i, j = 0, 0

    for idx in range(flag_len):
        i = (i + 1) % 256
        j = (j + enc[i]) % 256
        enc[i], enc[j] = enc[j], enc[i]
        k = enc[(enc[i] + enc[j]) % 256]
        flag[idx] = flag[idx] ^ k
    return flag


def to_str(xs):
    return "".join(list(map(lambda x : chr(x), xs)))

# bonus_flag from binary
flag = [
    0x21, 0x07, 0x89, 0x1f, 0x0d, 0x3b, 0x96, 0x26,
    0xd1, 0x92, 0xb3, 0x5f, 0x41, 0x8a, 0x5b, 0xb5,
    0xb1, 0xde, 0x1a, 0xd1, 0x45, 0x0f, 0xce, 0xb6,
    0xef, 0xc1, 0x45, 0x02, 0xa6, 0x20, 0xe0, 0x7a,
    0xf1, 0x06, 0xe8, 0x88, 0xc7, 0xc1, 0x1e, 0xed,
    0xca, 0x95, 0x23, 0x86, 0x46, 0x26, 0xc8, 0x0b,
    0x1f, 0xee, 0xc1, 0x16, 0xf5, 0x40, 0x22, 0xb1,
    0xb8, 0x65, 0x4c, 0x65, 0xb9, 0x4c, 0x3e, 0xb7,
    0xeb, 0xf1, 0x50, 0x7e, 0xaf, 0x40, 0x6d, 0xa6,
    0x9a, 0xd2, 0xee, 0x3a, 0x93, 0x62, 0x32, 0x54,
    0xf2, 0x68, 0x69, 0x8e, 0xcc, 0x6e, 0x99, 0xcd,
    0x37, 0xde, 0xd1, 0x45, 0x54, 0x04, 0x74, 0xf8,
    0x43, 0xbf, 0x03, 0x95
]


if __name__ == '__main__':
    key = list(map(lambda x : ord(x), "rc4"))
    out = encode(key, len(key))
    fl = gimme(out, flag, len(flag))
    print(to_str(fl))
